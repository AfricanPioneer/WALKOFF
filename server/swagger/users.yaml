/users:
  get:
    tags:
      - Users
    summary: Read all users
    description: ''
    operationId: server.endpoints.users.read_all_users
    produces:
      - application/json
    responses:
      200:
        description: Success
        schema:
          description: A list of Users
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/definitions/OutputUser'
/users/{user_name}:
  parameters:
    - name: user_name
      in: path
      description: The name that needs to be fetched.
      required: true
      type: string
  put:
    tags:
      - Users
    summary: Create a user
    description: ''
    operationId: server.endpoints.users.create_user
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: The new user object to be created
        required: true
        schema:
          $ref: '#/definitions/CreateUser'
    responses:
      201:
        description: User created.
        schema:
          $ref: '#/definitions/OutputUser'
      462:
        description: Could not create user <username>. User already exists.
        schema:
          $ref: '#/definitions/Error'
  get:
    tags:
      - Users
    summary: Get a user
    description: ''
    operationId: server.endpoints.users.read_user
    produces:
      - application/json
    responses:
      200:
        description: Success
        schema:
          $ref: '#/definitions/OutputUser'
      461:
        description: Could not display user <username>. User does not exist.
        schema:
          $ref: '#/definitions/Error'
  post:
    tags:
      - Users
    summary: Update a user
    description: ''
    operationId: server.endpoints.users.update_user
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: Updated fields for the user object
        required: true
        schema:
          $ref: '#/definitions/UpdateUser'
    responses:
      200:
        description: Success
        schema:
          $ref: '#/definitions/OutputUser'
      461:
        description: Could not edit user <username>. User does not exist.
        schema:
          $ref: '#/definitions/Error'
  delete:
    tags:
      - Users
    summary: Delete a user
    description: ''
    operationId: server.endpoints.users.delete_user
    consumes:
      - application/json
    produces:
      - application/json
    responses:
      200:
        description: Success
      401:
        description: Could not delete user <username>. User is current user.
        schema:
          $ref: '#/definitions/Error'
      461:
        description: Could not delete user <username>. User does not exist.
        schema:
          $ref: '#/definitions/Error'